#!/bin/bash

tld=$1

if [ -z "$tld" ]; then
    tld='.'
fi

unzip=`which unzip`
if [ -z "$unzip" ]; then
    echo "This script requires unzip to function properly"
    exit 1
fi

process_jar() {
    patched=""
    if [ -z "$2" ]; then
        parent=$1
    else
        parent=$2
    fi

    if [ -z "$3" ]; then
        subjarfile=""
    else
        subjarfile="$3"
    fi


    hasjndi=`unzip -l $1 2> /dev/null | grep -E "JndiLookup.class$"`
    hasmpc=`unzip -l $1 2> /dev/null | grep -E "MessagePatternConverter.class$"`
    hasjars=`unzip -l $1 2> /dev/null | grep -Ei  ".jar$|.war$|.ear$" | grep -v "Archive: " | awk '{print $NF}'`
    if [ ! -z "$hasmpc" ]; then
        outfile="$(mktemp)"
        unzip -p $1 $hasmpc 2> /dev/null > $outfile
        ispatched=`grep 'Message Lookups are no longer supported' $outfile`
        if [ ! -z "$ispatched" ]; then
            patched=1
        fi
        #rm $outfile
    fi
    if [ ! -z "$hasjndi" ]; then
        if [ ! -z "$patched" ]; then
            echo "$parent contains JndiLookup.class  ** BUT APPEARS TO BE 2.16 OR NEWER **"
        else
            echo "WARNING: $parent contains JndiLookup.class"
        fi
    fi

    if [ ! -z "$hasjars" ]; then
        for subjar in $hasjars
            do
                subjarfile="$(mktemp)"
                unzip -p $1 $subjar 2> /dev/null > $subjarfile
                #echo "Extracting $subjar from $1 to $subjarfile"
                process_jar "$subjarfile" "$parent"
                rm $subjarfile 2> /dev/null
            done

    fi
    if [ ! -z "$hasmpc" ]; then
        rm $outfile 2> /dev/null
    fi
}

if [[ $OSTYPE == 'darwin'* ]]; then
    jars=`find $tld -fstype local -type f \( -iname "*.jar" -o -iname "*.war" -o -iname "*.ear" \)`
else
    jars=`find $tld -mount -type f \( -iname "*.jar" -o -iname "*.war" -o -iname "*.ear" \)`
fi

for jar in $jars
    do
        process_jar "$jar"
    done
